<?php

$token = "mPTy9ZrGrItGjJKlzRQZvSFy";
$dataFile = "/tmp/ttt.txt";

header('Content-Type: application/json');
$command = $_POST['command'];
if($command == '/ttt' and $_POST['token'] == $token) {

	$gameData = parse_ini_file($dataFile);

    $input = $_POST['text'];
	$inputArray = explode(" ", $input);
	$sanitizedArray = array_values(array_filter($inputArray)); 
	
	if($sanitizedArray[0] == "play") {
		//first check if a game is going on
		if($gameData['onGoing'] == 1) {
			echo messageMaker("There is already a game going on");
		}
		else {
			//check username validity, very simple way
			if(strpos($sanitizedArray[1], "@") == 0) {
				$gameData['onGoing'] = 1;
				$gameData['player1'] = $_POST['user_name']; 
				
			
				$gameData['player2'] = substr($sanitizedArray[1], 1); //need to check if user exists??
				
				$gameData['turn'] = $gameData['player1'];
				$gameData['moveCount'] = 0;
				//display empty board
				$gameData['existingMoves'] = array("A1" => ' ', "A2" => ' ', "A3" => ' ', "B1" => ' ', "B2" => ' ', "B3" => ' ', "C1" => ' ', "C2" => ' ', "C3" => ' ');
				echo displayBoard($gameData, "It is ".$gameData['turn']."'s move");
				
				//write back into file
				write_php_ini($gameData, $dataFile);

			}
			else {
				echo messageMaker("Please specify an opponent using @ username");
			}
			
		}
		
	}
	else if($sanitizedArray[0] == "move") {
	
		if($gameData['onGoing'] == 0) {
			echo messageMaker("Please start a new game by playing someone in the channel");
			exit;
		}
		//check if the player has the right to move
		if($gameData['turn'] == $_POST['user_name']) {
			$move = $sanitizedArray[1];
			//now check validity of move, must be A,B,C follow by 1,2,3 and the space cannot be taken
			if(preg_match('/^[ABC][123]$/' , $move)) {
				
				//now check if the space is taken
				if($gameData['existingMoves'][$move] == ' ') {
					
					if($gameData['turn'] == $gameData['player1']) {
						$gameData['existingMoves'][$move] = 'X';
						$gameData['turn'] = $gameData['player2'];
					}
					else {
						$gameData['existingMoves'][$move] = 'O';
						$gameData['turn'] = $gameData['player1'];
					}
					$gameData['moveCount']++;
					
					//if the game is over..
					$winner = checkWin($gameData);
					if($winner != "NONE" or $gameData['moveCount'] == 9) {
						if($winner == 'player1') {
							$winmessage = "The winner is ".$gameData['player1'];
						}
						else if($winner == 'player2'){
							$winmessage = "The winner is ".$gameData['player2'];
						}
						else {
							$winmessage = "There are no winners";
						}
						
						echo displayBoard($gameData, "The game is over, ".$winmessage);
						
						$gameData = clearData($gameData);
						
						//write back into file
						write_php_ini($gameData, $dataFile);
						exit;
					}
					else {
						echo displayBoard($gameData, "It is ".$gameData['turn']."'s move");
					}
				
					//write back into file
					write_php_ini($gameData, $dataFile);
				}
				
			}
			
			
			echo messageMaker("Sorry that is not a valid move");
	
		}
		else {
			echo messageMaker("Sorry, it is not your turn. Please ask @".$gameData['turn']." to make a move");
		}
	}
	else if($sanitizedArray[0] == "status") {
		if($gameData['onGoing'] == 0) {
			echo messageMaker("There is no game in the channel");
			exit;
		}
		else {
			echo displayBoard($gameData, "It is ".$gameData['turn']."'s move");
		}
	}
	else {
		//command not recognized
	}
}


function messageMaker($message) {

	$array = array("response_type" => "in_channel",
				   "text" => $message,
					"link_names" => 1
				);
	return json_encode($array);
}

function displayBoard($gameData, $message) {
	$array = array("response_type" => "in_channel",
				   "text" => "```| ".$gameData['existingMoves']['A1']." | ".$gameData['existingMoves']['A2']." | ".$gameData['existingMoves']['A3']." |\n|---+---+---|\n| ".
									$gameData['existingMoves']['B1']." | ".$gameData['existingMoves']['B2']." | ".$gameData['existingMoves']['B3']." |\n|---+---+---|\n| ".
									$gameData['existingMoves']['C1']." | ".$gameData['existingMoves']['C2']." | ".$gameData['existingMoves']['C3']." |```",
				    "attachments" => array("0" => array("text" => $message))
				   );
	return json_encode($array);
}

function write_php_ini($array, $file)
{
    $res = array();
    foreach($array as $key => $val)
    {
        if(is_array($val))
        {
            //$res[] = "[$key]";
            foreach($val as $skey => $sval) $res[] = "$key"."[".$skey."]  = ".(is_numeric($sval) ? $sval : '"'.$sval.'"');
        }
        else $res[] = "$key = ".(is_numeric($val) ? $val : '"'.$val.'"');
    }
    safefilerewrite($file, implode("\r\n", $res));
}

function safefilerewrite($fileName, $dataToSave)
{    if ($fp = fopen($fileName, 'w'))
    {
        $startTime = microtime(TRUE);
        do
        {  $canWrite = flock($fp, LOCK_EX);
           // If lock not obtained sleep for 0 - 100 milliseconds, to avoid collision and CPU load
           if(!$canWrite) usleep(round(rand(0, 100)*1000));
        } while ((!$canWrite)and((microtime(TRUE)-$startTime) < 5));

        //file was locked so now we can store information
        if ($canWrite)
        {            fwrite($fp, $dataToSave);
            flock($fp, LOCK_UN);
        }
        fclose($fp);
    }

}

function clearData($gameData) {

	$gameData['onGoing'] = 0;
	$gameData['player1'] = '';
	$gameData['player2'] = '';
	$gameData['turn'] = '';
	$gameData['moveCount'] = 0;
	$gameData['existingMoves'] = array();
	
	return $gameData;
}

function checkWin($gameData) {
	// first check the horizontals
	$slice = array_unique(array_slice($gameData['existingMoves'], 0, 3));
	if(count($slice) == 1) {
		return getWinner($slice);
	}
	
	$slice = array_unique(array_slice($gameData['existingMoves'], 3, 3));
	if(count($slice) == 1) {
		return getWinner($slice);
	}
	
	$slice = array_unique(array_slice($gameData['existingMoves'], 6, 3));
	if(count($slice) == 1) {
		return getWinner($slice);
	}
	
	//now check the verticals
	$slice = array();
	array_push($slice, $gameData['existingMoves']['A1'], $gameData['existingMoves']['B1'], $gameData['existingMoves']['C1']);
	$slice = array_unique($slice);
	if(count($slice) == 1) {
		return getWinner($slice);
	}
	$slice = array();
	array_push($slice, $gameData['existingMoves']['A2'], $gameData['existingMoves']['B2'], $gameData['existingMoves']['C2']);
	$slice = array_unique($slice);
	if(count($slice) == 1) {
		return getWinner($slice);
	}
	$slice = array();
	array_push($slice, $gameData['existingMoves']['A3'], $gameData['existingMoves']['B3'], $gameData['existingMoves']['C3']);
	$slice = array_unique($slice);
	if(count($slice) == 1) {
		return getWinner($slice);
	}
	
	//now check the 2 diags
	$slice = array();
	array_push($slice, $gameData['existingMoves']['A1'], $gameData['existingMoves']['B2'], $gameData['existingMoves']['C3']);
	$slice = array_unique($slice);
	if(count($slice) == 1) {
		return getWinner($slice);
	}
	$slice = array();
	array_push($slice, $gameData['existingMoves']['A3'], $gameData['existingMoves']['B2'], $gameData['existingMoves']['C1']);
	$slice = array_unique($slice);
	if(count($slice) == 1) {
		return getWinner($slice);
	}
	
	return "NONE";
	
}

function getWinner($array) {
	if(reset($array) == 'X') {
		return "player1";
	}
	else if(reset($array) == 'O'){
		return "player2";
	}
	else {
		return "NONE";
	}
}
